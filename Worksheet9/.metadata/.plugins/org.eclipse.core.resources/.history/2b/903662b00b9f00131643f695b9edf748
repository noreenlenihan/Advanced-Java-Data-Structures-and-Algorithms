package w9;

public class LinkedListQueue<T> implements Queue<T>{
	private LinkedListVector<T> queuelist = new LinkedListVector<T>();
	
	@Override
	public void enqueue(T value) {
		return queuelist.insertLast(value);
		
	}

	@Override
	public T dequeue() {
		return queuelist.remove(queuelist.first());
		
	}

	@Override
	public T front() {
		return null;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}
	
	public static void main(String[] args) {
		List<String> list = new LinkedListVector<String>();
		
		Position<String> f = list.insertFirst("Rem");
		list.insertFirst("Peppa");
		list.insertAfter(f, "George");
		
		// Display the contents of the list
		Position<String> p = list.first();
		while (p != list.last()) {
			System.out.println(p.element());
			p = list.next(p);
		}
		System.out.println(p.element());

	}


}
